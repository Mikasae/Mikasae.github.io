<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/05/08/02%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/"/>
      <url>2021/05/08/02%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="一台电脑配置多个GitHub账号"><a href="#一台电脑配置多个GitHub账号" class="headerlink" title="一台电脑配置多个GitHub账号"></a>一台电脑配置多个GitHub账号</h1><blockquote><p>假设配置的两个GitHub账号分别为remmeiko和Mikasa</p><p>操作环境：Windows</p></blockquote><h2 id="0x01-生成密钥"><a href="#0x01-生成密钥" class="headerlink" title="0x01.生成密钥"></a>0x01.生成密钥</h2><blockquote><p>每一个GitHub账号可以有多个ssh key,但是一个ssh key只能用于一个GitHub账号，所以需要为每个GitHub账号生成对应的ssh key</p></blockquote><h3 id="1-生成第一个账号rem的密钥"><a href="#1-生成第一个账号rem的密钥" class="headerlink" title="1.生成第一个账号rem的密钥"></a>1.生成第一个账号rem的密钥</h3><pre><code class="shell">ssh-keygen -t rsa -C “邮箱1”</code></pre><blockquote><p>此处虽然没有加-f参数，但执行时自动选择路径并命名(会向你确认一下路径)</p></blockquote><ul><li>执行完后会在【C:\Users\用户\ .ssh】路径生成id_rsa(密钥)和id_rsa.pub(公钥)两个文件</li></ul><h3 id="2-生成第二个账号rem2的密钥"><a href="#2-生成第二个账号rem2的密钥" class="headerlink" title="2.生成第二个账号rem2的密钥"></a>2.生成第二个账号rem2的密钥</h3><blockquote><p>第二个账号一定要重新命名，不然会覆盖掉第一个账号生成的密钥文件，使用-f参数指定文件名字</p></blockquote><pre><code class="shell">ssh-keygen -t rsa -f &quot;C:\Users\用户\.ssh/rsa_2&quot; -C “邮箱2”</code></pre><ul><li>执行完会生成id_rsa_2(密钥)和id_rsa_2.pub(公钥)两个文件</li></ul><blockquote><p>ssh-keygen命令参数说明</p><ul><li>-t(type):指定要生成的密钥类型，有rsa1(SSH1),dsa(SSH2),ecdsa(SSH2),rsa(SSH2)等类型，较为常用的是rsa类型</li><li>-C comment：提供一个新的注释</li><li> -b bits：指定要生成的密钥长度 (单位:bit)，对于RSA类型的密钥，最小长度768bits,默认长度为2048bits。DSA密钥必须是1024bits</li><li>-f filename:指定生成的密钥文件名字</li></ul></blockquote><h2 id="0x02-将密钥添加至对应的GitHub账号"><a href="#0x02-将密钥添加至对应的GitHub账号" class="headerlink" title="0x02 将密钥添加至对应的GitHub账号"></a>0x02 将密钥添加至对应的GitHub账号</h2><ul><li><p>登录GitHub账号，找到在头像下方setting</p></li><li><p>其他如下图操作即可(从左至右)</p><p><img src="../../%E5%9B%BE%E7%89%87/%E8%B5%84%E6%96%99/01Typora%E4%BF%9D%E5%AD%98/image-20210506215919195.png" alt="image-20210506215919195"></p></li></ul><h2 id="0x03-编辑配置文件"><a href="#0x03-编辑配置文件" class="headerlink" title="0x03 编辑配置文件"></a>0x03 编辑配置文件</h2><ul><li>先确认.ssh文件夹中是否存在config文件，没有则创建一个(无文件后缀)</li><li>编辑如下内容</li></ul><pre><code class="shell"># 账号1的邮箱Host github_remmeiko    HostName github.com    User git    IdentityFile C:/Users/用户名/.ssh/id_rsa# 账号2的邮箱Host github_Mikasa  # 前缀名可以任意设置    HostName github.com    User git    IdentityFile C:/Users/用户名/.ssh/id_rsa_2</code></pre><blockquote><p>Host修改自己能够识别的名称即可</p><p>HostName设置为github.com和ssd.github.com都可以</p><p>IdentityFile为密钥所在的路径(注意寻找自己密钥所在的路径)</p><p>ps:如果实在找不到密钥所在路径，推荐下载everything软件查找</p><p><img src="../../%E5%9B%BE%E7%89%87/%E8%B5%84%E6%96%99/01Typora%E4%BF%9D%E5%AD%98/image-20210507181236264.png" alt="image-20210507181236264"></p></blockquote><ul><li><p>上述操作成功之后就可以进行测试了</p><ul><li>终端输入以下命令</li></ul><pre><code class="shell">ssh -T git@github_remssh -T git@github_rem2</code></pre><ul><li>显示以下内容则表示配置成功了</li></ul><pre><code class="shell">Hi rem! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre></li></ul><h2 id="0x04-配置仓库设置"><a href="#0x04-配置仓库设置" class="headerlink" title="0x04 配置仓库设置"></a>0x04 配置仓库设置</h2><h3 id="1-删除全局配置"><a href="#1-删除全局配置" class="headerlink" title="1.删除全局配置"></a>1.删除全局配置</h3><pre><code class="shell">git config --global --unset &#39;user.name&#39;git config --global --unset &#39;user.email&#39;</code></pre><h3 id="2-设置本地配置"><a href="#2-设置本地配置" class="headerlink" title="2.设置本地配置"></a>2.设置本地配置</h3><pre><code class="shell">git config user.name `用户名`git config user.email `邮箱@163.com`</code></pre><h2 id="0x05-本地仓库关联远程仓库"><a href="#0x05-本地仓库关联远程仓库" class="headerlink" title="0x05 本地仓库关联远程仓库"></a>0x05 本地仓库关联远程仓库</h2><pre><code class="shell"># 记住要到对应的本地仓库路径下执行对应的命令git remote add origin git@github_remmeiko:xxx/xxx.gitgit remote add origin git@github_Mikasa:xxx.xxx.git</code></pre><blockquote><p>　命令中后半段xxx/xxx.git就是下图中2标注的信息</p></blockquote><p><img src="../../%E5%9B%BE%E7%89%87/%E8%B5%84%E6%96%99/01Typora%E4%BF%9D%E5%AD%98/image-20210507175641145.png" alt="image-20210507175641145"></p><h2 id="0x06-补充说明"><a href="#0x06-补充说明" class="headerlink" title="0x06 补充说明"></a>0x06 补充说明</h2><ul><li><p>关于账号和邮箱的说明</p><ul><li>本地git设置的全局账号和邮箱，是不随git库改变的，但是也可以为每个仓库设置单独的账号和邮箱。全局配置优先级低于仓库配置，就是说如果仓库和全局都设置了账号和邮箱，那么实际生效是仓库设置的账号和邮箱</li></ul><blockquote><p><img src="../../%E5%9B%BE%E7%89%87/%E8%B5%84%E6%96%99/01Typora%E4%BF%9D%E5%AD%98/image-20210507233902733.png" alt="image-20210507233902733"></p></blockquote><ul><li>每个GitHub账号在注册时也有一个对应的账号和邮箱</li></ul><blockquote><p><img src="../../%E5%9B%BE%E7%89%87/%E8%B5%84%E6%96%99/01Typora%E4%BF%9D%E5%AD%98/image-20210507234533695.png" alt="image-20210507234533695"></p></blockquote><blockquote><p>git设置的name和email下文使用user.name和user.email代替</p></blockquote><ul><li>这两处的name和email不是一样的</li><li>在本地git设置的user.name和uer.email是作为我们commit记录时的一个标识，方便管理，可以清楚的知道是谁提交的。</li><li>如果你的user.name和user.email和GitHub账号上的name\email一致，当你提交修改时，github会将这两者关联起来，</li></ul><blockquote><p><img src="../../%E5%9B%BE%E7%89%87/%E8%B5%84%E6%96%99/01Typora%E4%BF%9D%E5%AD%98/image-20210508003939061.png" alt="image-20210508003939061"></p></blockquote></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/liujiakunit/article/details/45849095">关于ssh-keygen命令的介绍与用法</a></p><p><a href="https://www.shenxt.info/post/2020-03-11-multi-github-in-one-pc/">如何在一台电脑上设置多个github账号</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/06/hello-world/"/>
      <url>2021/05/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
