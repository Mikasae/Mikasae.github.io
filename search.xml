<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随手感慨</title>
      <link href="2021/05/20/08%E9%9A%8F%E5%90%8E%E6%84%9F%E6%85%A8/"/>
      <url>2021/05/20/08%E9%9A%8F%E5%90%8E%E6%84%9F%E6%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="关于男女关系的理解"><a href="#关于男女关系的理解" class="headerlink" title="关于男女关系的理解"></a>关于男女关系的理解</h1><p>​    在以前的时候就听八卦爆出杜海涛和沈梦辰爱情长跑最后分手，华晨宇和张碧晨未婚先孕人设崩塌。但是因为我这个人对身边的很多事情都不感兴趣，尤其是娱乐圈，因此就没有过多在意。但是今天看了几个关于这些瓜的分析后不经有些感慨。</p><ul><li><p>首先我对杜海涛和华晨宇都只是有个固有印象，一个憨厚的舞台配角和孤僻的华语才子，这些印象是很早以前通过电视节目形成的，一直没变过，在我心目中这个两个人的好感度还是挺高的，尤其是华晨宇，但是…….</p><blockquote><p>声明：所有感慨和诉说事情均来自网络中看到的相关报道，未经考证，真真假假，留待众人分说。只想表达一个核心感慨而已，娱乐圈就是一场低分电影，里面的明星不过是饰演出来人物角色而已，都是人设和幻象。</p></blockquote></li><li><p>杜海涛，他，资产过亿，”商业才子“，名门之后，顶流明星。在知道他利用憨厚人设大肆流量变现和商业投资后，我就明白了这家伙是个人精，双重面孔，准确来讲，屏幕上展现的杜海涛不过是他饰演的一个角色而已，演了十几年，假的还是没有成真。说说他的丑闻，13年打人事件，权志龙下跪献花事件(最离谱还是回怼网友)，柳岩伴娘事件，这些东西尤其是最后一个在我知道后我就对这个角色没有任何的好感度了，只是角色永远都不缺喜欢的人。</p></li><li><p>华晨宇，他，我就要多说一点了，因为他竟然曾经和邓紫棋在一起过，就离谱，因为我是从初中开始就一直喜欢邓紫棋这个角色的，一直到高中毕业吧！然后就是和张碧晨生了娃，看过张碧晨发的声明，发现这个设定自闭恐女的角色是个人精啊，至于有咩有PUA这些东西就没有人知道了。还有邓紫棋画这首歌竟然是写个这个角色的，爷吐了，不过，倒也无所谓了。</p></li><li><p>关于男女关系，之所以会说这个，是因为无论是杜海涛还是华晨宇，在他们的关系里面女方都是卑微的，沈梦辰有没有心机我不知道，但我觉得的是杜海涛对于这段关系是没有在意的。至于华晨宇，嗯，离谱，跟他的孤僻自闭设定相差太远。</p></li></ul><p>我觉得爱情和正常的男女关系双方应该是平等的，没有谁卑微这一说法，所谓相敬如宾就是如此。</p><blockquote><p>好了，想到哪写到哪，没有逻辑和整理，看官自由分说。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
            <tag> 与我无关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学试卷做题记录</title>
      <link href="2021/05/17/07%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E8%AF%95%E5%8D%B7%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>2021/05/17/07%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E8%AF%95%E5%8D%B7%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><h3 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h3><ul><li><p>知识点1</p><p>   设A为任一命题公式</p><ul><li><p>重言式（永真式）：A在它的各种赋值下取值均为真</p></li><li><p>矛盾式（永假式）：A在它的各种赋值下取值均为假</p></li><li><p>可满足式：非矛盾式则为可满足式</p><blockquote><p>重言式一定是可满足式</p></blockquote></li></ul></li><li><p>知识点2</p><ul><li>蕴含式：p-&gt;q<ul><li>只有p为真且q为假时p-&gt;q为假</li></ul></li><li>合取式：p∧q<ul><li>只有p和q都为真的时候p∧q才为真</li></ul></li><li>析取式：pVq<ul><li>只有p和q都为假的时候pVq才为假</li></ul></li><li>否定式：非p<ul><li>p为真，非p为假的</li></ul></li></ul></li><li><p>解题      B</p><blockquote><p>找出一种赋值下结果为假即可排除</p><p>A.        P=1,Q=0;P-&gt;Q为假，P-&gt;(P-&gt;Q)为假</p><p>B.        要想整体为假，则Q必须为0，前部分整体为真，即P必须为1；</p><p>将P=1,Q=0带入发现整体为真，因此为永真式</p><p>c.        P=1,Q=0</p><p>D.        P=1,Q=0</p></blockquote></li></ul><h3 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h3><ul><li><p>判断各非负整数列是否可简单图化</p><ol><li>非负整数列之和为偶数才可图化</li><li>最大度&lt;=顶点数-1</li><li>根据度数画出图观察是否为简单图</li></ol><blockquote><p>简单图：不含平行边和顶点自身的环</p></blockquote></li><li><p>解题 D</p><ul><li>根据1排除B，根据步骤2排除A，根据步骤3排除C</li></ul></li></ul><h3 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h3><ul><li><p>知识点（P125）</p><ul><li><p>自反： 如果a是A的元素，那么&lt;a,a&gt;是R的元素</p><blockquote><p>每个顶点都有环</p></blockquote></li><li><p>反自反：如果a是A的元素，那么&lt;a,a&gt;不是R的元素</p><blockquote><p>每个顶点都没有换</p></blockquote></li><li><p>对称： 如果&lt;a,b&gt;是R的元素，那么&lt;b,a&gt;是R的元素</p></li><li><p>反对称：如果&lt;a,b&gt;，&lt;b,a&gt;是R的元素，那么a,b相等</p><blockquote><p>只有单向边</p></blockquote></li><li><p>传递： 如果&lt;a,b&gt;，&lt;b,c&gt;是R的元素，那么&lt;a,c&gt;是R的元素</p></li></ul></li><li><p>解题    D</p><blockquote><p>A:反自反</p><p>B:反自反</p><p>C:传递性</p></blockquote></li></ul><h3 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h3><ul><li><p>解题    D</p></li><li><p>集合中可定义多少个不同的等价关系</p><ul><li>集合划分,举例说明</li><li>A={1,2}    (总计2个等价关系) {[1],[2]}  |  {[1,2]}</li><li>A={1,2,3}    (总计5个等价关系) {[1],[2],[3]}   |  {[1,2],[3]}  |  {[1,3],[2]}  |  {[2,3],[1]}  |  {[1,2,3]}</li></ul><blockquote><p>为方便辨认，将集合内部集合的{}用[]进行替换</p></blockquote></li></ul><h3 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h3><ul><li><p>知识点</p><ul><li>和第一题一样</li><li>可将00,01,10,11分别代入看有几个真</li></ul></li><li><p>解题    C</p></li></ul><h3 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h3><ul><li><p>知识点(P8)</p><ul><li>命题必须是陈述句    排除A</li><li>命题必须能确定真假    排除B(B无法确定真假)</li><li>当且仅当：&lt;-&gt;(等价联结词)<ul><li>p&lt;-&gt;q只有当p和q都为真或都为假的时候才为真</li></ul></li><li>只有…才….：–&gt;（蕴含联结词）<ul><li>只有p为真，q为假是p–&gt;q才为假</li></ul></li></ul></li><li><p>解题    此题感觉都不符合</p><ul><li>C选项p为真，q为假，整体为假</li><li>D选项p为真，q为假，整体为假</li></ul></li></ul><h3 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h3><ul><li><p>知识点(P301)</p><ul><li><p>点割集：删除某几个点能够使得图的连通分支增加的点集合</p><blockquote><p><img src="https://mikasae.github.io/Mikasa/boke/01%E8%80%83%E8%AF%95/image-20210517221006449.png" alt="image-20210517221006449"></p></blockquote></li><li><p>点连通图：使连通图G成为一个不连通图需要删除的点的最小数目，记为K，则图也可称作K-连通图</p></li><li><p>边连通图：使连通图G成为一个不连通图需要删去的边的最少数目，记为R，则图也可称作R边-连通图</p></li><li><p>彼得森图：</p><blockquote><p><img src="https://mikasae.github.io/Mikasa/boke/01%E8%80%83%E8%AF%95/image-20210517221426549.png" alt="image-20210517221426549"></p></blockquote></li></ul></li><li><p>解题     A</p><ul><li>删除上图中紫色的3条边可以使得此图不再连通</li><li>删除绿色框框标记的3个点可以使得此图不再连通</li></ul></li></ul><h3 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h3><ul><li><p>知识点(P113)</p><ul><li>恒等关系l(A)={&lt;x,x&gt;|x属于A}</li><li>全域关系E(A)={&lt;x,y&gt; | x属于A并且y属于A}=*<em>A</em>A**</li><li>(集合之间相乘)<ul><li>A={a,b},B={c,d}</li><li>A*B={&lt;a,c&gt;,&lt;a,d&gt;,&lt;c,a&gt;,&lt;c,d&gt;}</li></ul></li></ul></li><li><p>解题    D</p><blockquote><p>求出全域关系后和第一题知识点一样</p></blockquote></li></ul><h3 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h3><ul><li>知识点<ul><li>欧拉公式：边划分的区域数+顶点数=边数+2</li></ul></li><li>解题    D</li></ul><h3 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h3><ul><li><p>知识点</p><ul><li>集合和集合之间是包含关系，注意{a,b}属于{a,b,{a,b}}也是正确的</li></ul></li><li><p>解题    C</p></li></ul><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><h3 id="第1题-1"><a href="#第1题-1" class="headerlink" title="第1题"></a>第1题</h3><ul><li>知识点(P50)   推理公式</li><li>解题：  A-&gt;C</li></ul><h3 id="第2题-1"><a href="#第2题-1" class="headerlink" title="第2题"></a>第2题</h3><ul><li>知识点：直接除以7模是3组成的集合   </li><li>解题：  {3,7}</li></ul><h3 id="第3题-1"><a href="#第3题-1" class="headerlink" title="第3题"></a>第3题</h3><ul><li><p>知识点</p><blockquote><p>以图G为例子</p></blockquote><ul><li>连通图：图G是平凡图或者任何两个顶点都是连通的<ul><li>平凡图：只有一个结点的图</li></ul></li><li>强连通图：有向图中任意两个顶点中存在互相连通的路径</li><li>哈密顿图：拥有哈密顿回路的图<ul><li>哈密顿回路：经过图中所有顶点一次且仅一次的回路</li></ul></li></ul></li><li><p>答案：假，0–&gt;不一定存在回路</p></li></ul><h3 id="第4题-1"><a href="#第4题-1" class="headerlink" title="第4题"></a>第4题</h3><ul><li><p>知识点：P64，P75</p></li><li><p>解题：∃x(F(x)–&gt;G(x))</p></li></ul><h3 id="第5题-1"><a href="#第5题-1" class="headerlink" title="第5题"></a>第5题</h3><ul><li><p>知识点：P95</p><ul><li>A⊕B=(A-B)U(B-A)</li><li>A⊕A=(A-A)U(A-A)=Ø</li></ul></li><li><p>解题：Ø</p></li></ul><h3 id="第6题-1"><a href="#第6题-1" class="headerlink" title="第6题"></a>第6题</h3><ul><li><p>知识点：P92</p><ul><li>看答案有四个，一般会认为只有三个</li></ul></li><li><p>解题：{Ø，{Ø}，，{Ø，{Ø}} }</p></li></ul><h3 id="第7题-1"><a href="#第7题-1" class="headerlink" title="第7题"></a>第7题</h3><ul><li><p>知识点：P74</p><ul><li>直接根据书上的公式进行变化</li><li>前束范式：Q1X1Q2x2…Q(k)x(k)</li><li>注意前束范式的形式即可</li></ul></li><li><p>解题：∀x∃y(¬F(x,y))</p></li></ul><h3 id="第8题-1"><a href="#第8题-1" class="headerlink" title="第8题"></a>第8题</h3><ul><li>知识点：P307<ul><li>二部图：将图的节点V分为两个节点集V1和V2,图中每条边的两个端点都是一个属于V1,另一个属于V2</li><li>完全二部图：V1中每个顶点均与V2中的每个顶点相邻，即V1中每个顶点和V2中的所有顶点之间都存在边</li><li>欧拉回路(P316)：通过图中所有边一次且仅一次行遍所有顶点的通路</li><li>因此这个题就是求图总共有多少条边</li></ul></li><li>解题：r*s<ul><li>完全二部图，所以将图中顶点分为V1和V2,然后V1中所有顶点和V2中的所有顶点之间都存在边</li><li>因此总共含有的边数就是：V1*V2</li></ul></li></ul><h3 id="第9题-1"><a href="#第9题-1" class="headerlink" title="第9题"></a>第9题</h3><ul><li><p>知识点：P74</p><ul><li>做题时候直接翻书带公式</li></ul></li><li><p>解题：∀xA(x)∧B</p></li></ul><h3 id="第10题-1"><a href="#第10题-1" class="headerlink" title="第10题"></a>第10题</h3><ul><li><p>知识点：P297</p><ul><li>任何无向图中所有顶点的度数之和是边数的两倍</li><li>任何有向图中所有顶点的度数之和是边数的两倍，所有入度之和等于出度之和等于边数</li></ul></li><li><p>解题：   7</p><blockquote><p>10条边：因此所有顶点度数之和为20，减去已知度数(3 * 2+4 * 2=14)，剩余6</p><p>已知其余顶点的度数都小于3，求至少的顶点数，因此假设其余顶点度数为最大，小于3因此取2，</p><p>6/2=3，其余顶点数为3，因此所有顶点数之和为7</p></blockquote></li></ul><h2 id="解答题"><a href="#解答题" class="headerlink" title="解答题"></a>解答题</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>P28-P29</p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><ul><li>哈斯图相关知识点介绍</li></ul><blockquote><p><a href="https://blog.csdn.net/qq_26816591/article/details/46873463?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-1&spm=1001.2101.3001.4242">离散数学偏序关系哈斯图上（下）确界极小（大）值最大（小）值</a></p></blockquote><blockquote><p><img src="https://mikasae.github.io/Mikasa/boke/01%E8%80%83%E8%AF%95/image-20210517235303589.png" alt="image-20210517235303589"></p></blockquote><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>根据哈斯图进行求解</p><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>P22等推理公式进行求解</p>]]></content>
      
      
      <categories>
          
          <category> 期末考试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
            <tag> 期末考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>占用位置</title>
      <link href="2021/05/12/06%E5%8D%A0%E7%94%A8%E4%BD%8D%E7%BD%AE2/"/>
      <url>2021/05/12/06%E5%8D%A0%E7%94%A8%E4%BD%8D%E7%BD%AE2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>占用位置</title>
      <link href="2021/05/11/05%E5%8D%A0%E7%94%A8%E4%BD%8D%E7%BD%AE/"/>
      <url>2021/05/11/05%E5%8D%A0%E7%94%A8%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>node编译工具node-gyp相关错误</title>
      <link href="2021/05/10/04npm-node%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
      <url>2021/05/10/04npm-node%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="node编译工具node-gyp相关错误"><a href="#node编译工具node-gyp相关错误" class="headerlink" title="node编译工具node-gyp相关错误"></a>node编译工具node-gyp相关错误</h1><h3 id="错误1：gyp-ERR-stack-Error-spawn-E-Software3-VisualStudio-IDE-MSBuild-15-0-Bin-MSBuild-exe-ENOENT"><a href="#错误1：gyp-ERR-stack-Error-spawn-E-Software3-VisualStudio-IDE-MSBuild-15-0-Bin-MSBuild-exe-ENOENT" class="headerlink" title="错误1：gyp ERR! stack Error: spawn E:\Software3\VisualStudio\IDE\MSBuild\15.0\Bin\MSBuild.exe ENOENT"></a>错误1：gyp ERR! stack Error: spawn E:\Software3\VisualStudio\IDE\MSBuild\15.0\Bin\MSBuild.exe ENOENT</h3><blockquote><p><img src="https://mikasae.github.io/Mikasa/boke/image-20210510101314896.png" alt="image-20210510101314896"></p></blockquote><ul><li>原因：这个问题应该是node-gyp找不到编译工具引发的(VisualStudio–&gt;可能是和C++编译工具有关)</li></ul><blockquote><p>node-gyp是一个编译工具，负责将源码形式的node modules编译成适应于本地环境的、编译好的node modules，其中的编译过程就需要依赖一些编译工具（环境），如c编译器和python环境</p></blockquote><ul><li><strong>解决</strong>：安装windows-build-tools构建工具即可(注意大小写)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global --production windows-build-tools --vs2017</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://mikasae.github.io/Mikasa/boke/image-20210510101929105.png" alt="image-20210510101929105"></p></blockquote><ul><li>问题解决可以参考</li></ul><p><a href="https://github.com/nodejs/node-gyp/issues/1747">MSBuild.exe ENOENT-使用VS2019而不是VS2017 </a></p><p><a href="https://www.npmjs.com/package/windows-build-tools">安装windows-build-tools工具</a></p><ul><li><p>其他</p><ul><li><p>这个问题是我在安装node-sass插件中出现的，node-sass的使用也是需要依赖具体编译环境的，因此如果没有构建工具或者编译环境有问题就会出现各种各样的错误</p></li><li><p>因此使用安装node-sass，建议先安装构建环境，如果使用过程中出现问题优先考虑是不是编译环境出问题了</p></li><li><p>node-gyp这个编译工具是依赖于多种编译环境的如python,c等</p></li></ul><blockquote><p>从安装sass的那一天起，我的npm工具不管输入什么命令，就开始疯狂报错，我还以为是我的环境出问题了，还在犹豫要不要重装。—-&gt;然后重点来了，在安装完这个构建工具后，我的npm工具好了。。。。好了。。。。。(tm)它好了,emmmmm，如下</p><p><img src="https://mikasae.github.io/Mikasa/boke/image-20210510103303381.png" alt="image-20210510103303381"></p><p>所以我估摸着就是sass需要依赖特定的编译环境，而我的电脑的编译环境有问题，node-gyp编译工具编译出错了，所以才会导致各种各样的问题</p></blockquote><blockquote><p>还有一点，这里只是简单的了解和解决问题，我有预感以后还会出现新的问题，那时候应该必须仔细了解node-gyp编译和编译环境才能解决。谁知道呢？</p></blockquote></li></ul><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用</title>
      <link href="2021/05/09/03Git%E4%BD%BF%E7%94%A8/"/>
      <url>2021/05/09/03Git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h1><h2 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h2><ul><li>项目目录下初始化本地仓库(Git代码库)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>添加文件到暂存区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加指定文件到暂存区</span></span><br><span class="line">git add 文件1 文件2 文件3...</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">git add [dir]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加当前目录所有文件到暂存区</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><ul><li>将暂存区文件添加到本地仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;备注信息&quot;</span><br></pre></td></tr></table></figure><ul><li><p>远程同步</p><ul><li>remote</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示所有远程仓库（-v参数会显示详细信息）</span></span><br><span class="line">git remote -v </span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加一个新的远程仓库，并指定一个方便使用的简写代替</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 仓库url:git@github_remmeiko:xxx/xxx.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 简写shortname：可随便指定</span></span><br><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure><ul><li>push</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将本地仓库的文件推送到远程分支</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果远程仓库没有这个分支，会新建一个同名的远程分支</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果省略远程分支名，则表示两者同名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin branchname</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果省略本地分支名，则表示删除指定的远程分支</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为这等同于推送一个空的本地分支到远程分支。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 等同于</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立当前分支和远程分支的追踪关系</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果当前分支与远程分支之间存在追踪关系</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 则可以省略分支和 -u</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push --all origin</span></span><br></pre></td></tr></table></figure><ul><li>pull</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取所有远程分支到本地镜像仓库中</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取并合并项目其他人员的一个分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull origin branchname</span></span><br></pre></td></tr></table></figure></li><li><p>查看信息</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看代码修改情况（工作区，暂存区，本地仓库）</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有配置信息</span></span><br><span class="line">git config --list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地仓库用户名和邮箱</span></span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局配置</span></span><br><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><ul><li>设置用户名和邮箱</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 本地仓库用户名和邮箱</span></span><br><span class="line">git config user.name &quot;用户名&quot;</span><br><span class="line">git config user.email &quot;邮箱&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局配置</span></span><br><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><ul><li>删除用户名和邮箱</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 本地仓库用户名和邮箱</span></span><br><span class="line">git config --unset user.name &quot;用户名&quot;</span><br><span class="line">git config --unset user.email &quot;邮箱&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局配置</span></span><br><span class="line">git config --global --unset user.name &quot;用户名&quot;</span><br><span class="line">git config --global --unset user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><ul><li>分支</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支和远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个本地分支，依然停留在本分支   [branch-name]:分支名字</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换分支</span></span><br><span class="line">git checkout [branch-name]</span><br><span class="line">M CrawierMaven/DownloadMaven/Frame.java # M是带过来上个分支的修改</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地分支</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line">git branch -r -d origin/[branch-name]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/08/01hello-world/"/>
      <url>2021/05/08/01hello-world/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章我会一直续写下去的，心事，感悟都可以，毕竟一辈子很短，我还想去看看更多有趣的事，去见更多有趣的人。</p><p>Hello world，世界，你好，往后余生，还请多担待。</p></blockquote><h2 id="0x01-前情说明"><a href="#0x01-前情说明" class="headerlink" title="0x01 前情说明"></a>0x01 前情说明</h2><ul><li><p>创建此博客的初衷在于每天记录一点新东西，督促自己每天都要进步</p></li><li><p>当累计到合适的时候，我会将其进行汇总归纳发布到我的另一个<a href="https://remmeiko.buzz/">博客网站</a></p></li><li><p>看到学相伴阿超大佬每天都会发布一篇博客，并且能够保持健康规律的生活，希望能够向他学习</p></li></ul><h2 id="0x02-我现阶段的小理想"><a href="#0x02-我现阶段的小理想" class="headerlink" title="0x02 我现阶段的小理想"></a>0x02 我现阶段的小理想</h2><ul><li>现在的我希望能够找到一份满意的工作，生活能够不慌不忙不卑不吭，工作不一定要钱多，不一定要事少，只要我内心觉得满意就行(很抽象)。</li><li>具体描述的话，emmm……我想一想，写字楼？与周围人好好相处？平均水平的工资？对了，一定要有上升空间和进取的态度。</li><li>如果什么时候我开始真正的佛系，或许不是我看开了，而是我这一辈子已经能够看到彼岸，那时候每天可能就在流水线也说不定，若果真如此那人生真就已经一眼望穿了。（呸呸呸，想啥呢？扯远了扯远了，这样一辈子太无聊了）</li></ul><h2 id="0x03-我追求的啊"><a href="#0x03-我追求的啊" class="headerlink" title="0x03 我追求的啊"></a>0x03 我追求的啊</h2><ul><li><p>我只想<strong>将复杂的人生过的简单，将平凡的生活过得精彩</strong></p><blockquote><p>我在想啊，人生太复杂，要是所有的事情都能总结出”套路“，变成一个习惯，那不就简单了吗？哈，再加上强迫症就能将生活过的稍微那么精致一点，</p></blockquote></li><li><p><strong>健身和学习是唯一付出就有回报的投资</strong></p><blockquote><p>生活中大佬太多了而且都很低调，你永远不知道你身边走过去的那个普通的小子有多牛逼，所以只有不断学习才能不断进步，去看更远的地方    </p></blockquote><ul><li>学习是让自己安静下来，健身是为了让自己冷静下来</li></ul><blockquote><p>当然了，现在在考研，健身是不可能健身的，唯一能坚持就是在一天过完后做做俯卧撑，引体向上之类的而已。</p></blockquote><p>​                                                                                                            —–20210513</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置 多个GitHub账号</title>
      <link href="2021/05/08/02%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/"/>
      <url>2021/05/08/02%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="一台电脑-配置多个GitHub账号"><a href="#一台电脑-配置多个GitHub账号" class="headerlink" title="一台电脑 配置多个GitHub账号"></a>一台电脑 配置多个GitHub账号</h1><blockquote><p>假设配置的两个GitHub账号分别为remmeiko和Mikasa</p><p>操作环境：Windows</p></blockquote><h2 id="0x01-生成密钥"><a href="#0x01-生成密钥" class="headerlink" title="0x01.生成密钥"></a>0x01.生成密钥</h2><blockquote><p>每一个GitHub账号可以有多个ssh key,但是一个ssh key只能用于一个GitHub账号，所以需要为每个GitHub账号生成对应的ssh key</p></blockquote><h3 id="1-生成第一个账号rem的密钥"><a href="#1-生成第一个账号rem的密钥" class="headerlink" title="1.生成第一个账号rem的密钥"></a>1.生成第一个账号rem的密钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “邮箱1”</span><br></pre></td></tr></table></figure><blockquote><p>此处虽然没有加-f参数，但执行时自动选择路径并命名(会向你确认一下路径)</p></blockquote><ul><li>执行完后会在【C:\Users\用户\ .ssh】路径生成id_rsa(密钥)和id_rsa.pub(公钥)两个文件</li></ul><h3 id="2-生成第二个账号rem2的密钥"><a href="#2-生成第二个账号rem2的密钥" class="headerlink" title="2.生成第二个账号rem2的密钥"></a>2.生成第二个账号rem2的密钥</h3><blockquote><p>第二个账号一定要重新命名，不然会覆盖掉第一个账号生成的密钥文件，使用-f参数指定文件名字</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f <span class="string">&quot;C:\Users\用户\.ssh/rsa_2&quot;</span> -C “邮箱2”</span><br></pre></td></tr></table></figure><ul><li>执行完会生成id_rsa_2(密钥)和id_rsa_2.pub(公钥)两个文件</li></ul><blockquote><p>ssh-keygen命令参数说明</p><ul><li>-t(type):指定要生成的密钥类型，有rsa1(SSH1),dsa(SSH2),ecdsa(SSH2),rsa(SSH2)等类型，较为常用的是rsa类型</li><li>-C comment：提供一个新的注释</li><li>-b bits：指定要生成的密钥长度 (单位:bit)，对于RSA类型的密钥，最小长度768bits,默认长度为2048bits。DSA密钥必须是1024bits</li><li>-f filename:指定生成的密钥文件名字</li></ul></blockquote><h2 id="0x02-将密钥添加至对应的GitHub账号"><a href="#0x02-将密钥添加至对应的GitHub账号" class="headerlink" title="0x02 将密钥添加至对应的GitHub账号"></a>0x02 将密钥添加至对应的GitHub账号</h2><ul><li><p>登录GitHub账号，找到在头像下方setting</p></li><li><p>其他如下图操作即可(从左至右)</p><p><img src="http://img-mikasa.test.upcdn.net//git/image-20210506215919195.png" alt="GitHub添加密钥"></p></li></ul><h2 id="0x03-编辑配置文件"><a href="#0x03-编辑配置文件" class="headerlink" title="0x03 编辑配置文件"></a>0x03 编辑配置文件</h2><ul><li>先确认.ssh文件夹中是否存在config文件，没有则创建一个(无文件后缀)</li><li>编辑如下内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Host:主机别名</span></span><br><span class="line"><span class="comment"># HostName:github服务器地址</span></span><br><span class="line"><span class="comment"># User:GitHub服务器用户名</span></span><br><span class="line"><span class="comment"># IdentityFile:和GitHub服务器通信的ssh私钥</span></span><br><span class="line"><span class="comment"># 通过IdentityFile可以区分不同的账号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 账号1的邮箱</span></span><br><span class="line">Host github_remmeiko</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile C:/Users/用户名/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 账号2的邮箱</span></span><br><span class="line">Host github_Mikasa  <span class="comment"># 前缀名可以任意设置</span></span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile C:/Users/用户名/.ssh/id_rsa_2</span><br></pre></td></tr></table></figure><blockquote><p>Host修改自己能够识别的名称即可</p><p>HostName设置为github.com和ssd.github.com都可以</p><p>IdentityFile为密钥所在的路径(注意寻找自己密钥所在的路径)</p><p>ps:如果实在找不到密钥所在路径，推荐下载everything软件查找</p><p><img src="http://img-mikasa.test.upcdn.net//git/image-20210507181236264.png" alt="Everything软件示例图"></p></blockquote><ul><li><p>上述操作成功之后就可以测试是否配置成功了</p><ul><li>终端输入以下命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github_remmeiko</span><br><span class="line">ssh -T git@github_Mikasa</span><br></pre></td></tr></table></figure><ul><li>显示以下内容则表示配置成功了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi rem! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide  bash access.</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="0x04-使用ssh-agent管理密钥"><a href="#0x04-使用ssh-agent管理密钥" class="headerlink" title="0x04 使用ssh-agent管理密钥"></a>0x04 使用ssh-agent管理密钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-add id_rsa</span><br><span class="line">ssh-add id_rsa_2 </span><br><span class="line"><span class="comment"># 后面是生成的密钥</span></span><br></pre></td></tr></table></figure><h2 id="0x05-配置仓库设置"><a href="#0x05-配置仓库设置" class="headerlink" title="0x05 配置仓库设置"></a>0x05 配置仓库设置</h2><h3 id="1-删除全局配置"><a href="#1-删除全局配置" class="headerlink" title="1.删除全局配置"></a>1.删除全局配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> <span class="string">&#x27;user.name&#x27;</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> <span class="string">&#x27;user.email&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-设置本地配置"><a href="#2-设置本地配置" class="headerlink" title="2.设置本地配置"></a>2.设置本地配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name `用户名`</span><br><span class="line">git config user.email `邮箱@163.com`</span><br></pre></td></tr></table></figure><h2 id="0x06-本地仓库关联远程仓库"><a href="#0x06-本地仓库关联远程仓库" class="headerlink" title="0x06 本地仓库关联远程仓库"></a>0x06 本地仓库关联远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记住要到对应的本地仓库路径下执行对应的命令</span></span><br><span class="line">git remote add origin git@github_remmeiko:xxx/xxx.git</span><br><span class="line">git remote add origin git@github_Mikasa:xxx.xxx.git</span><br></pre></td></tr></table></figure><blockquote><p>　命令中后半段xxx/xxx.git就是下图中2标注的信息</p></blockquote><p><img src="http://img-mikasa.test.upcdn.net//git/image-20210507175641145.png"></p><h2 id="0x07-补充说明"><a href="#0x07-补充说明" class="headerlink" title="0x07 补充说明"></a>0x07 补充说明</h2><ul><li><p>关于账号和邮箱的说明</p><ul><li>我们一般接触的有两个地方的账号和邮箱，一个是git设置的账号邮箱，一个是GitHub账号对应的账号和邮箱</li><li>1）本地git设置账号和邮箱分为系统，全局和本地(local)，全局和系统是不随git库改变的，但是也可以为每个仓库设置单独的账号和邮箱。这个账号和邮箱不是作为验证信息，是作为commit提交记录相关信息的标识。</li></ul><blockquote><p>系统配置是对这台电脑所有用户生效的</p><p>全局配置是对该用户登录下的所有GitHub仓库生效的</p><p>本地(local)配置：也就是为单独仓库进行的配置，只对该仓库生效</p><p>优先级逐渐增加，譬如全局配置的优先级要低于仓库配置，就是说如果仓库和全局都设置了账号和邮箱，那么实际生效是仓库配置设置的账号和邮箱。</p></blockquote><blockquote><p><img src="http://img-mikasa.test.upcdn.net//git/image-20210507233902733.png" alt="git配置"></p></blockquote><ul><li>2）每个GitHub账号在注册时都会有一个对应的账号和邮箱，这个是GitHub的基本信息，说标识也可以，如下图</li></ul><blockquote><p><img src="http://img-mikasa.test.upcdn.net//git/image-20210507234533695.png" alt="GitHub账号配置"></p></blockquote><blockquote><p>前提说明：git设置的账号和邮箱下文将使用user.name和user.email代替</p></blockquote><ul><li>在本地git设置的user.name和uer.email作为commit记录时的一个标识，用来方便管理，可以清楚的知道是谁提交的。</li><li>当你的user.name和user.email和GitHub账号上的name\email一致，你提交修改时，github会自动将这两者关联起来，因此建议git设置的账号邮箱和GitHub账号邮箱一致，（随意填写也是可以的，但如果当两处的账号和邮箱不一致时，就无法进行统计，且头像变灰，而且你也可以改成其他人的账号和邮箱，记录就会显示是别人提交的)</li></ul><blockquote><p><img src="http://img-mikasa.test.upcdn.net//git/image-20210508003939061.png" alt="是否关联"></p></blockquote></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/liujiakunit/article/details/45849095">关于ssh-keygen命令的介绍与用法</a></p><p><a href="https://www.shenxt.info/post/2020-03-11-multi-github-in-one-pc/">如何在一台电脑上设置多个github账号</a></p><p><a href="https://www.jianshu.com/p/f3020c04d966">对Git用户名与Github账户关系的理解</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git 配置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
